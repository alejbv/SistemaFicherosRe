// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/aplication.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Aplication_AddFile_FullMethodName    = "/service.Aplication/AddFile"
	Aplication_DeleteFile_FullMethodName = "/service.Aplication/DeleteFile"
	Aplication_ListFile_FullMethodName   = "/service.Aplication/ListFile"
	Aplication_AddTags_FullMethodName    = "/service.Aplication/AddTags"
	Aplication_DeleteTags_FullMethodName = "/service.Aplication/DeleteTags"
)

// AplicationClient is the client API for Aplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AplicationClient interface {
	AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*ListFileResponse, error)
	AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error)
	DeleteTags(ctx context.Context, in *DeleteTagsRequest, opts ...grpc.CallOption) (*DeleteTagsResponse, error)
}

type aplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewAplicationClient(cc grpc.ClientConnInterface) AplicationClient {
	return &aplicationClient{cc}
}

func (c *aplicationClient) AddFile(ctx context.Context, in *AddFileRequest, opts ...grpc.CallOption) (*AddFileResponse, error) {
	out := new(AddFileResponse)
	err := c.cc.Invoke(ctx, Aplication_AddFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aplicationClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, Aplication_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aplicationClient) ListFile(ctx context.Context, in *ListFileRequest, opts ...grpc.CallOption) (*ListFileResponse, error) {
	out := new(ListFileResponse)
	err := c.cc.Invoke(ctx, Aplication_ListFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aplicationClient) AddTags(ctx context.Context, in *AddTagsRequest, opts ...grpc.CallOption) (*AddTagsResponse, error) {
	out := new(AddTagsResponse)
	err := c.cc.Invoke(ctx, Aplication_AddTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aplicationClient) DeleteTags(ctx context.Context, in *DeleteTagsRequest, opts ...grpc.CallOption) (*DeleteTagsResponse, error) {
	out := new(DeleteTagsResponse)
	err := c.cc.Invoke(ctx, Aplication_DeleteTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AplicationServer is the server API for Aplication service.
// All implementations must embed UnimplementedAplicationServer
// for forward compatibility
type AplicationServer interface {
	AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ListFile(context.Context, *ListFileRequest) (*ListFileResponse, error)
	AddTags(context.Context, *AddTagsRequest) (*AddTagsResponse, error)
	DeleteTags(context.Context, *DeleteTagsRequest) (*DeleteTagsResponse, error)
	mustEmbedUnimplementedAplicationServer()
}

// UnimplementedAplicationServer must be embedded to have forward compatible implementations.
type UnimplementedAplicationServer struct {
}

func (UnimplementedAplicationServer) AddFile(context.Context, *AddFileRequest) (*AddFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedAplicationServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedAplicationServer) ListFile(context.Context, *ListFileRequest) (*ListFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFile not implemented")
}
func (UnimplementedAplicationServer) AddTags(context.Context, *AddTagsRequest) (*AddTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedAplicationServer) DeleteTags(context.Context, *DeleteTagsRequest) (*DeleteTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTags not implemented")
}
func (UnimplementedAplicationServer) mustEmbedUnimplementedAplicationServer() {}

// UnsafeAplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AplicationServer will
// result in compilation errors.
type UnsafeAplicationServer interface {
	mustEmbedUnimplementedAplicationServer()
}

func RegisterAplicationServer(s grpc.ServiceRegistrar, srv AplicationServer) {
	s.RegisterService(&Aplication_ServiceDesc, srv)
}

func _Aplication_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AplicationServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aplication_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AplicationServer).AddFile(ctx, req.(*AddFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aplication_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AplicationServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aplication_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AplicationServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aplication_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AplicationServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aplication_ListFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AplicationServer).ListFile(ctx, req.(*ListFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aplication_AddTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AplicationServer).AddTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aplication_AddTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AplicationServer).AddTags(ctx, req.(*AddTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aplication_DeleteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AplicationServer).DeleteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aplication_DeleteTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AplicationServer).DeleteTags(ctx, req.(*DeleteTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aplication_ServiceDesc is the grpc.ServiceDesc for Aplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Aplication",
	HandlerType: (*AplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFile",
			Handler:    _Aplication_AddFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Aplication_DeleteFile_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _Aplication_ListFile_Handler,
		},
		{
			MethodName: "AddTags",
			Handler:    _Aplication_AddTags_Handler,
		},
		{
			MethodName: "DeleteTags",
			Handler:    _Aplication_DeleteTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aplication.proto",
}
